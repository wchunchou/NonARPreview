import * as React from "react";
import { PropertyControls, ControlType } from "framer";

// Define type of property
interface Props {
    text: string;
    width: number;
    height: number;
    progress: number;
    strokePercent: number;
    capStyle: string;
    color: string;
    bgColor: string;
    rotation: number;
}

export class ProgressCircle extends React.Component<Props> {

    // Set default properties
    static defaultProps = {
        progress: 25,
        strokePercent: 25,
        test: 'test',
        capStyle: 'butt',
        color: '#f77a52',
        bgColor: '#e6e6e6',
        rotation: 0
    }

    // Items shown in property panel
    static propertyControls: PropertyControls = {
        color: {
          type: ControlType.Color,
          title: 'Color'
        },
        bgColor: {
          type: ControlType.Color,
          title: 'bgColor'
        },
        progress: { type: ControlType.Number, title: "Progress" },
        strokePercent: {
            type: ControlType.Number,
            title: "Stroke %",
            min: 1,
            max: 100,
            step: 1
        },
        capStyle: {
          type: ControlType.Enum,
          title: 'CapStyle',
          options: ['butt', 'round'],
          optionTitles: ['Flat', 'Round']
        },
        rotation: {
            type: ControlType.Number,
            title: "Rotate",
            min: -360,
            max: 360,
            step: 1
        },
    }

    render() {
        const progressPercent = this.props.progress / 100
        const taller = this.props.height > this.props.width
        const smallerDimension = taller ? this.props.width : this.props.height
        const strokeWidth = smallerDimension * this.props.strokePercent / 100 / 2
        const size = {
            width: this.props.width - strokeWidth,
            height: this.props.height - strokeWidth
        }
        const RADIUS = size.width > size.height ? size.height / 2 : size.width / 2
        const CIRCUMFERENCE = 2 * Math.PI * RADIUS;
        const dashoffset = CIRCUMFERENCE * (1 - progressPercent);

        const viewBox = `0 0 ${this.props.width} ${this.props.height}`
        const rotation = this.props.rotation - 90

        const svgStyle: React.CSSProperties = {
            transform: `rotate(${rotation}deg)`
        };
        const meterStyle: React.CSSProperties = {
            fill: "none",
            stroke: this.props.bgColor,
            strokeDasharray: CIRCUMFERENCE
        };
        const valueStyle: React.CSSProperties = {
            fill: "none",
            stroke: this.props.color,
            strokeLinecap: this.props.capStyle,
            strokeDashoffset: dashoffset,
            strokeDasharray: CIRCUMFERENCE
        };
        // return <div style={style}>{this.props.text}</div>;
        return <svg style={svgStyle} className="progress" width={this.props.width} height={this.props.height} viewBox={viewBox}>
            <circle
                style={meterStyle}
                className="progress__meter"
                cx={this.props.width / 2}
                cy={this.props.height / 2}
                r={RADIUS}
                strokeWidth={strokeWidth}
            />
            <circle
                style={valueStyle}
                className="progress__value"
                cx={this.props.width / 2}
                cy={this.props.height / 2}
                r={RADIUS}
                strokeWidth={strokeWidth}
            />
        </svg>;
    }
}
